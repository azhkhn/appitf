#! /usr/bin/env python3
"""appitfd.

    Application interface daemon for system interaction.

    This interface provides a HTTP service to allow an
    Adobe AIR or HTML5 digital signage application to
    interact with the local operating system.

Usage:
    appitfd [options]

Options:
    --host=<host>, -H   Specifies the host to listen on [default: 127.0.0.1].
    --port=<port>, -p   Specifies the port to listen on [default: 5000].
    --help, -h          Shows this page.
"""
from subprocess import DEVNULL, CalledProcessError, run
from sys import stderr, exit as exit_

from docopt import docopt
from flask import Flask

from backlight import DoesNotExist, DoesNotSupportAPI, Backlight


APPLICATION = Flask('AppItf')
HOST = '127.0.0.1'
PORT = 5000
GRAPHICS_CARD = 'acpi_video0'
XRANDR = '/usr/bin/xrandr'
DISPLAY = ':0'
OUTPUT = 'eDP1'


def get_xrandr_command(value, xrandr=XRANDR, display=DISPLAY, output=OUTPUT):
    """Returns the respective xrandr command line."""

    return f'DISPLAY={display} {xrandr} --output {output} --brightness {value}'


def set_brightness_software(percent):
    """Set brightness using software."""

    value = percent / 100
    completed_process = run(
        get_xrandr_command(value), shell=True, stderr=DEVNULL, stdout=DEVNULL)

    try:
        completed_process.check_returncode()
    except CalledProcessError as cpe:
        return (str(cpe), 500)

    return f'Brightness set to {percent}% using software.'


@APPLICATION.route('/backlight/<int:percent>', methods=['POST'])
def set_backlight(percent):
    """Sets the backlight brightness."""

    try:
        backlight = Backlight(GRAPHICS_CARD)
    except (DoesNotExist, DoesNotSupportAPI):
        return set_brightness_software(percent)

    try:
        backlight.percent = percent
    except ValueError as value_error:
        return (str(value_error), 400)
    except PermissionError:
        return ('Service is not running as root.', 500)

    return f'Brightness set to {percent}% using hardware.'


def main(options):
    """Runs the daemon."""

    host = options['--host']
    port = options['--port']

    try:
        port = int(port)
    except ValueError:
        print(f'Port number must be an integer, not "{port}".', file=stderr)
        return 1

    APPLICATION.run(host=host, port=port)
    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
