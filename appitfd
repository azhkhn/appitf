#! /usr/bin/env python3
"""appitfd.

    Application interface daemon for system interaction.

    This interface provides a HTTP service to allow an
    Adobe AIR or HTML5 digital signage application to
    interact with the local operating system.

Usage:
    appitfd [options]

Options:
    --host=<host>, -H   Specifies the host to listen on [default: 127.0.0.1].
    --port=<port>, -p   Specifies the port to listen on [default: 5000].
    --help, -h          Shows this page.
"""
from contextlib import suppress
from subprocess import DEVNULL, CalledProcessError, check_call
from sys import stderr, exit as exit_

from docopt import docopt
from flask import jsonify, Flask

from backlight import DoesNotExist, DoesNotSupportAPI, Backlight, \
    ChrontelCH7511B


APPLICATION = Flask('AppItf')
GRAPHICS_CARD = 'acpi_video0'
XRANDR = '/usr/bin/xrandr'
DISPLAY = ':0'
OUTPUT = 'eDP1'


def _xrandr(value):
    """Returns the respective xrandr command line."""

    return f'DISPLAY={DISPLAY} {XRANDR} --output {OUTPUT} --brightness {value}'


def set_backlight_i2c(percent):
    """Attempts to set the backlight using the i2c."""

    backlight = ChrontelCH7511B()

    try:
        backlight.percent = percent
    except KeyError:
        backlight.raw = min(backlight.values)
        percent = backlight.percent

    print(f'Set backlight to {percent}% by I2C.', flush=True)
    return jsonify({'percent': percent, 'method': 'I2C'})


def set_backlight_linux(percent):
    """Sets the backlight using Linux's /sys/class/backlight API."""

    backlight = Backlight(GRAPHICS_CARD)

    try:
        backlight.percent = percent
    except PermissionError:
        message = 'Service is not running as root.'
        print(message, file=stderr, flush=True)
        return (message, 500)

    print(f'Set backlight to {percent}% by hardware.', flush=True)
    return jsonify({'percent': percent, 'method': 'HW'})


def set_brightness_software(percent):
    """Set brightness using software."""

    value = percent / 100

    try:
        check_call(_xrandr(value), stdout=DEVNULL, stderr=DEVNULL, shell=True)
    except CalledProcessError as cpe:
        print(f'Failed to run {XRANDR}.', file=stderr, flush=True)
        return (str(cpe), 500)

    print(f'Set backlight to {percent}% by software.', flush=True)
    return jsonify({'percent': percent, 'method': 'SW'})


@APPLICATION.route('/backlight/<int:percent>', methods=['POST'])
def set_backlight(percent):
    """Sets the backlight brightness."""

    if not 0 <= percent <= 100:
        print('Got invalid percentage:', percent, file=stderr, flush=True)
        return (f'Got invalid percentage: {percent}.', 400)

    with suppress(DoesNotExist):
        return set_backlight_i2c(percent)

    with suppress(DoesNotExist, DoesNotSupportAPI):
        return set_backlight_linux(percent)

    return set_brightness_software(percent)


def main(options):
    """Runs the daemon."""

    host = options['--host']
    port = options['--port']

    try:
        port = int(port)
    except ValueError:
        print(f'Port number must be an integer, not "{port}".', file=stderr,
              flush=True)
        return 1

    APPLICATION.run(host=host, port=port)
    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
